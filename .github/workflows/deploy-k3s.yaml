name: Deploy Solar Project

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Мы запрашиваем полную историю, чтобы diff был максимально точным
          fetch-depth: 0

      # --- ШАГ 1: НАДЕЖНО ОПРЕДЕЛЯЕМ ИЗМЕНЕННЫЕ ФАЙЛЫ ---
      - name: Get changed files
        id: changed-files # Даем шагу ID, чтобы ссылаться на его результат
        uses: tj-actions/changed-files@v44 # Используем проверенный Action

      # --- ШАГ 2: ОТЛАДКА - ПЕЧАТАЕМ РЕЗУЛЬТАТ ---
      - name: DEBUG - List changed files from tj-actions
        run: |
          echo "List of all changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      # ==================================================================
      # ===               БЭКЕНД: KUBERNETES СЕРВИСЫ                   ===
      # ==================================================================

      # --- Сервис: API (complex.py) ---
      - name: Build and Deploy API
        # --- НОВОЕ УСЛОВИЕ IF ---
        # Проверяем, есть ли в списке измененных файлов что-то из папки api
        if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/api/')
        run: |
          echo ">>> API files changed. Building and deploying API service..."
          docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t localhost:5000/complex_api:${{ github.sha }} ./web_app/backend/services/api
          docker push localhost:5000/complex_api:${{ github.sha }}
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          kubectl set image deployment/service-api complex-api-service=localhost:5000/complex_api:${{ github.sha }}

          
# name: Deploy Solar Project

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: self-hosted

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 2 # <-- ДОБАВЬ ЭТО

#       # --- НОВЫЙ ОТЛАДОЧНЫЙ ШАГ ---
#       - name: DEBUG - List changed files
#         run: |
#           echo "Commit SHA: ${{ github.sha }}"
#           echo "--- Modified files ---"
#           echo "${{ join(github.event.head_commit.modified, '\n') }}"
#           echo "--- Added files ---"
#           echo "${{ join(github.event.head_commit.added, '\n') }}"
#           echo "--- Removed files ---"
#           echo "${{ join(github.event.head_commit.removed, '\n') }}"
#           echo "----------------------"
#           echo "Full modified string for IF condition:"
#           echo "${{ join(github.event.head_commit.modified, '') }}"

#       # ==================================================================
#       # ===               БЭКЕНД: KUBERNETES СЕРВИСЫ                   ===
#       # ==================================================================

#       # --- Сервис: API (complex.py) ---
#       - name: Build and Deploy API
#         # Запускаем, только если изменились файлы в папке api/
#         if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/api/')
#         run: |
#           echo ">>> Building and deploying API service..."
#           docker build -t localhost:5000/complex_api:${{ github.sha }} ./web_app/backend/services/api
#           docker push localhost:5000/complex_api:${{ github.sha }}
#           export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
#           kubectl set image deployment/service-api service-api=localhost:5000/complex_api:${{ github.sha }}

#       # # --- Сервис: SRNE Adaptor ---
#       # - name: Build and Deploy SRNE Adaptor
#       #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/srne_adaptor/')
#       #   run: |
#       #     echo ">>> Building and deploying SRNE Adaptor service..."
#       #     docker build -t localhost:5000/srne_adaptor:${{ github.sha }} ./web_app/backend/services/srne_adaptor
#       #     docker push localhost:5000/srne_adaptor:${{ github.sha }}
#       #     export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
#       #     # ВАЖНО: Проверь, что имя деплоймента именно 'service-srne-adaptor'
#       #     kubectl set image deployment/service-srne-adaptor service-srne-adaptor=localhost:5000/srne_adaptor:${{ github.sha }}

#       # # --- Сервис: GPIO ---
#       # - name: Build and Deploy GPIO
#       #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/gpio/')
#       #   run: |
#       #     echo ">>> Building and deploying GPIO service..."
#       #     docker build -t localhost:5000/gpio:${{ github.sha }} ./web_app/backend/services/gpio
#       #     docker push localhost:5000/gpio:${{ github.sha }}
#       #     export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
#       #     kubectl set image deployment/service-gpio service-gpio=localhost:5000/gpio:${{ github.sha }}

#       # # --- Добавь сюда другие k8s-сервисы (lamp_mode, trafficlight_mode) по аналогии ---


#       # # ==================================================================
#       # # ===                   ФРОНТЕНД (KUBERNETES)                    ===
#       # # ==================================================================
#       # - name: Build and Deploy Frontend
#       #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/frontend/')
#       #   run: |
#       #     echo ">>> Building and deploying Frontend..."
#       #     docker build -t localhost:5000/frontend:${{ github.sha }} ./web_app/frontend
#       #     docker push localhost:5000/frontend:${{ github.sha }}
#       #     export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
#       #     # ВАЖНО: Проверь имя деплоймента для фронтенда
#       #     kubectl set image deployment/frontend-deployment frontend=localhost:5000/frontend:${{ github.sha }}


#       # # ==================================================================
#       # # ===                   СЕРВИСЫ SYSTEMD                        ===
#       # # ==================================================================

#       # # --- Сервис: init_gpio_numbers ---
#       # - name: Deploy Init GPIO Script
#       #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/init/')
#       #   run: |
#       #     echo ">>> Deploying Init GPIO script..."
#       #     # Копируем обновленный скрипт в его рабочую директорию
#       #     sudo cp ./web_app/backend/services/init/update_gpio_numbers.py /opt/solar_scripts/update_gpio_numbers.py
#       #     # Перезапускаем сервис
#       #     sudo systemctl restart init_gpio_numbers.service

#       # # --- Сервис: time_source ---
#       # - name: Deploy Time Source Script
#       #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/time_source/')
#       #   run: |
#       #     echo ">>> Deploying Time Source script..."
#       #     sudo cp ./web_app/backend/services/time_source/time_source.py /opt/solar_scripts/time_source.py
#       #     sudo systemctl restart time_source.service

#       # # --- Добавь сюда wifi_hotspot_service по аналогии ---