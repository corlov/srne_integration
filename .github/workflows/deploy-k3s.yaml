name: Deploy Solar Controller Managment Project

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
          # --- ШАГ 1: ЕДИНСТВЕННЫЙ ЧИСТЫЙ CHECKOUT ---
          - name: Clean Checkout
            uses: actions/checkout@v3
            with:
              clean: true
              fetch-depth: 0 # Нужно для tj-actions

          # --- ШАГ 2: ЕДИНСТВЕННОЕ ОПРЕДЕЛЕНИЕ ИЗМЕНЕНИЙ ---
          - name: Get changed files
            id: changed-files
            uses: tj-actions/changed-files@v44

          # --- ШАГ 3: ЕДИНСТВЕННЫЙ ЛОГИН В DOCKER HUB ---
          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          # ==================================================================
          # ===               ТЕСТОВЫЙ МИКРОСЕРВИС                       ===
          # ==================================================================
          - name: Build and Deploy TEST Service
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/test_service/')
            run: |
              echo ">>> Building and deploying TEST service..."
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t ${{ secrets.DOCKERHUB_USERNAME }}/test-service:${{ github.sha }} ./web_app/backend/services/test_service
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/test-service:${{ github.sha }}
              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
              kubectl apply -f ./web_app/backend/services/test_service/deployment.yaml
              kubectl set image deployment/test-service test-service-container=${{ secrets.DOCKERHUB_USERNAME }}/test-service:${{ github.sha }}

          # ==================================================================
          # ===                     БОЕВОЙ API                             ===
          # ==================================================================
          - name: Build and Deploy API
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/api/')
            run: |
              echo ">>> Building and deploying API service..."
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t ${{ secrets.DOCKERHUB_USERNAME }}/complex_api:${{ github.sha }} ./web_app/backend/services/api
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/complex_api:${{ github.sha }}

              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

              # --- ШАГ А: ЗАМЕНЯЕМ ПЛЕЙСХОЛДЕР ИМЕНИ ПОЛЬЗОВАТЕЛЯ ---
              sed -i "s|__DOCKERHUB_USERNAME__|${{ secrets.DOCKERHUB_USERNAME }}|g" ./web_app/backend/services/api/deployment.yaml

              # --- ШАГ Б: ЗАМЕНЯЕМ ПЛЕЙСХОЛДЕР ТЕГА ---
              sed -i "s|__IMAGE_TAG__|${{ github.sha }}|g" ./web_app/backend/services/api/deployment.yaml

              # --- ШАГ В: ПРОВЕРЯЕМ РЕЗУЛЬТАТ ---
              echo ">>> Displaying final deployment.yaml before apply:"
              echo "----------------------------------------------------"
              cat ./web_app/backend/services/api/deployment.yaml
              echo "----------------------------------------------------"

              # --- ШАГ Г: ПРИМЕНЯЕМ ГОТОВЫЙ МАНИФЕСТ ---
              echo ">>> Applying manifest to the cluster..."
              #kubectl apply -f ./web_app/backend/services/api/deployment.yaml
              kubectl apply -f ./web_app/backend/services/api/
          


          # ==================================================================
          # ===                     СЕРВИС GPIO                            ===
          # ==================================================================
          # docker run -d -p 5000:5000 --restart=always --name registry registry:2
          - name: Build and Deploy GPIO
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/gpio/')
            run: |
              echo ">>> Building and deploying GPIO service..."
              # --- ИЗМЕНЕНИЕ: Собираем и тегируем для локального репозитория ---
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t localhost:5000/service-gpio:${{ github.sha }} ./web_app/backend/services/gpio
              # --- ИЗМЕНЕНИЕ: Пушим в локальный репозиторий ---
              docker push localhost:5000/service-gpio:${{ github.sha }}

              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

              # --- Готовим deployment.yaml для GPIO ---
              echo ">>> Preparing GPIO deployment manifest..."
              # --- ИЗМЕНЕНИЕ: Вставляем полный локальный путь к образу ---
              sed -i "s|__IMAGE_NAME_AND_TAG__|localhost:5000/service-gpio:${{ github.sha }}|g" ./web_app/backend/services/gpio/deployment.yaml

              # --- Применяем ВСЕ манифесты из папки GPIO ---
              echo ">>> Applying all manifests from the GPIO directory..."
              kubectl apply -f ./web_app/backend/services/gpio/

          
          
          # ==================================================================
          # ===                     СЕРВИС SRNE                            ===
          # ==================================================================
          - name: Build and Deploy SRNE
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/srne_adaptor/')
            run: |
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t localhost:5000/service-srne-adaptor:${{ github.sha }} ./web_app/backend/services/srne_adaptor
              docker push localhost:5000/service-srne-adaptor:${{ github.sha }}
              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
              sed -i "s|__IMAGE_NAME_AND_TAG__|localhost:5000/service-srne-adaptor:${{ github.sha }}|g" ./web_app/backend/services/srne_adaptor/deployment.yaml
              kubectl apply -f ./web_app/backend/services/srne_adaptor/

          
          # ==================================================================
          # ===                     СЕРВИС lamp_mode                       ===
          # ==================================================================
          - name: Build and Deploy lamp-mode
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/lamp_mode/')
            run: |
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t localhost:5000/service-lamp-mode:${{ github.sha }} ./web_app/backend/services/lamp_mode
              docker push localhost:5000/service-lamp-mode:${{ github.sha }}
              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
              sed -i "s|__IMAGE_NAME_AND_TAG__|localhost:5000/service-lamp-mode:${{ github.sha }}|g" ./web_app/backend/services/lamp_mode/deployment.yaml
              kubectl apply -f ./web_app/backend/services/lamp_mode/


          # ==================================================================
          # ===                     СЕРВИС trafficlight_mode               ===
          # ==================================================================
          - name: Build and Deploy trafficlight-mode
            if: contains(steps.changed-files.outputs.all_changed_files, 'web_app/backend/services/trafficlight_mode/')
            run: |
              docker build --no-cache --build-arg APP_VERSION=${{ github.sha }} -t localhost:5000/service-trafficlight-mode:${{ github.sha }} ./web_app/backend/services/trafficlight_mode
              docker push localhost:5000/service-trafficlight-mode:${{ github.sha }}
              export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
              sed -i "s|__IMAGE_NAME_AND_TAG__|localhost:5000/service-trafficlight-mode:${{ github.sha }}|g" ./web_app/backend/services/trafficlight_mode/deployment.yaml
              kubectl apply -f ./web_app/backend/services/trafficlight_mode/






          # # ==================================================================
          # # ===                   ФРОНТЕНД (KUBERNETES)                    ===
          # # ==================================================================
          # - name: Build and Deploy Frontend
          #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/frontend/')
          #   run: |
          #     echo ">>> Building and deploying Frontend..."
          #     docker build -t localhost:5000/frontend:${{ github.sha }} ./web_app/frontend
          #     docker push localhost:5000/frontend:${{ github.sha }}
          #     export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          #     # ВАЖНО: Проверь имя деплоймента для фронтенда
          #     kubectl set image deployment/frontend-deployment frontend=localhost:5000/frontend:${{ github.sha }}


          # # ==================================================================
          # # ===                   СЕРВИСЫ SYSTEMD                        ===
          # # ==================================================================

          # # --- Сервис: init_gpio_numbers ---
          # - name: Deploy Init GPIO Script
          #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/init/')
          #   run: |
          #     echo ">>> Deploying Init GPIO script..."
          #     # Копируем обновленный скрипт в его рабочую директорию
          #     sudo cp ./web_app/backend/services/init/update_gpio_numbers.py /opt/solar_scripts/update_gpio_numbers.py
          #     # Перезапускаем сервис
          #     sudo systemctl restart init_gpio_numbers.service

          # # --- Сервис: time_source ---
          # - name: Deploy Time Source Script
          #   if: contains(join(github.event.head_commit.modified, ''), 'web_app/backend/services/time_source/')
          #   run: |
          #     echo ">>> Deploying Time Source script..."
          #     sudo cp ./web_app/backend/services/time_source/time_source.py /opt/solar_scripts/time_source.py
          #     sudo systemctl restart time_source.service

          # # --- Добавь сюда wifi_hotspot_service по аналогии ---

         