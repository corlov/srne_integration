from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SettingsGet200ResponseMessageLightControlSpecialPowerControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charging_method=None, no_charging_below_zero=None, each_night_on_function_enabled=None, special_power_control_function_enabled=None):  # noqa: E501
        """SettingsGet200ResponseMessageLightControlSpecialPowerControl - a model defined in OpenAPI

        :param charging_method: The charging_method of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.  # noqa: E501
        :type charging_method: str
        :param no_charging_below_zero: The no_charging_below_zero of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.  # noqa: E501
        :type no_charging_below_zero: bool
        :param each_night_on_function_enabled: The each_night_on_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.  # noqa: E501
        :type each_night_on_function_enabled: bool
        :param special_power_control_function_enabled: The special_power_control_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.  # noqa: E501
        :type special_power_control_function_enabled: bool
        """
        self.openapi_types = {
            'charging_method': str,
            'no_charging_below_zero': bool,
            'each_night_on_function_enabled': bool,
            'special_power_control_function_enabled': bool
        }

        self.attribute_map = {
            'charging_method': 'chargingMethod',
            'no_charging_below_zero': 'noChargingBelowZero',
            'each_night_on_function_enabled': 'eachNightOnFunctionEnabled',
            'special_power_control_function_enabled': 'specialPowerControlFunctionEnabled'
        }

        self._charging_method = charging_method
        self._no_charging_below_zero = no_charging_below_zero
        self._each_night_on_function_enabled = each_night_on_function_enabled
        self._special_power_control_function_enabled = special_power_control_function_enabled

    @classmethod
    def from_dict(cls, dikt) -> 'SettingsGet200ResponseMessageLightControlSpecialPowerControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _settings_get_200_response_message_lightControl_specialPowerControl of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.  # noqa: E501
        :rtype: SettingsGet200ResponseMessageLightControlSpecialPowerControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charging_method(self) -> str:
        """Gets the charging_method of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :return: The charging_method of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :rtype: str
        """
        return self._charging_method

    @charging_method.setter
    def charging_method(self, charging_method: str):
        """Sets the charging_method of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :param charging_method: The charging_method of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :type charging_method: str
        """

        self._charging_method = charging_method

    @property
    def no_charging_below_zero(self) -> bool:
        """Gets the no_charging_below_zero of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :return: The no_charging_below_zero of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :rtype: bool
        """
        return self._no_charging_below_zero

    @no_charging_below_zero.setter
    def no_charging_below_zero(self, no_charging_below_zero: bool):
        """Sets the no_charging_below_zero of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :param no_charging_below_zero: The no_charging_below_zero of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :type no_charging_below_zero: bool
        """

        self._no_charging_below_zero = no_charging_below_zero

    @property
    def each_night_on_function_enabled(self) -> bool:
        """Gets the each_night_on_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :return: The each_night_on_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :rtype: bool
        """
        return self._each_night_on_function_enabled

    @each_night_on_function_enabled.setter
    def each_night_on_function_enabled(self, each_night_on_function_enabled: bool):
        """Sets the each_night_on_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :param each_night_on_function_enabled: The each_night_on_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :type each_night_on_function_enabled: bool
        """

        self._each_night_on_function_enabled = each_night_on_function_enabled

    @property
    def special_power_control_function_enabled(self) -> bool:
        """Gets the special_power_control_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :return: The special_power_control_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :rtype: bool
        """
        return self._special_power_control_function_enabled

    @special_power_control_function_enabled.setter
    def special_power_control_function_enabled(self, special_power_control_function_enabled: bool):
        """Sets the special_power_control_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.


        :param special_power_control_function_enabled: The special_power_control_function_enabled of this SettingsGet200ResponseMessageLightControlSpecialPowerControl.
        :type special_power_control_function_enabled: bool
        """

        self._special_power_control_function_enabled = special_power_control_function_enabled
