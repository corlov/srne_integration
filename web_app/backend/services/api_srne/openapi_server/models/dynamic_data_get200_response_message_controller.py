from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicDataGet200ResponseMessageController(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days=None, full_charges=None, temperature=None, charging_mode=None, over_discharges=None):  # noqa: E501
        """DynamicDataGet200ResponseMessageController - a model defined in OpenAPI

        :param days: The days of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :type days: float
        :param full_charges: The full_charges of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :type full_charges: float
        :param temperature: The temperature of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :type temperature: float
        :param charging_mode: The charging_mode of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :type charging_mode: str
        :param over_discharges: The over_discharges of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :type over_discharges: float
        """
        self.openapi_types = {
            'days': float,
            'full_charges': float,
            'temperature': float,
            'charging_mode': str,
            'over_discharges': float
        }

        self.attribute_map = {
            'days': 'days',
            'full_charges': 'fullCharges',
            'temperature': 'temperature',
            'charging_mode': 'chargingMode',
            'over_discharges': 'overDischarges'
        }

        self._days = days
        self._full_charges = full_charges
        self._temperature = temperature
        self._charging_mode = charging_mode
        self._over_discharges = over_discharges

    @classmethod
    def from_dict(cls, dikt) -> 'DynamicDataGet200ResponseMessageController':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _dynamic_data_get_200_response_message_controller of this DynamicDataGet200ResponseMessageController.  # noqa: E501
        :rtype: DynamicDataGet200ResponseMessageController
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days(self) -> float:
        """Gets the days of this DynamicDataGet200ResponseMessageController.


        :return: The days of this DynamicDataGet200ResponseMessageController.
        :rtype: float
        """
        return self._days

    @days.setter
    def days(self, days: float):
        """Sets the days of this DynamicDataGet200ResponseMessageController.


        :param days: The days of this DynamicDataGet200ResponseMessageController.
        :type days: float
        """

        self._days = days

    @property
    def full_charges(self) -> float:
        """Gets the full_charges of this DynamicDataGet200ResponseMessageController.


        :return: The full_charges of this DynamicDataGet200ResponseMessageController.
        :rtype: float
        """
        return self._full_charges

    @full_charges.setter
    def full_charges(self, full_charges: float):
        """Sets the full_charges of this DynamicDataGet200ResponseMessageController.


        :param full_charges: The full_charges of this DynamicDataGet200ResponseMessageController.
        :type full_charges: float
        """

        self._full_charges = full_charges

    @property
    def temperature(self) -> float:
        """Gets the temperature of this DynamicDataGet200ResponseMessageController.


        :return: The temperature of this DynamicDataGet200ResponseMessageController.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this DynamicDataGet200ResponseMessageController.


        :param temperature: The temperature of this DynamicDataGet200ResponseMessageController.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def charging_mode(self) -> str:
        """Gets the charging_mode of this DynamicDataGet200ResponseMessageController.


        :return: The charging_mode of this DynamicDataGet200ResponseMessageController.
        :rtype: str
        """
        return self._charging_mode

    @charging_mode.setter
    def charging_mode(self, charging_mode: str):
        """Sets the charging_mode of this DynamicDataGet200ResponseMessageController.


        :param charging_mode: The charging_mode of this DynamicDataGet200ResponseMessageController.
        :type charging_mode: str
        """

        self._charging_mode = charging_mode

    @property
    def over_discharges(self) -> float:
        """Gets the over_discharges of this DynamicDataGet200ResponseMessageController.


        :return: The over_discharges of this DynamicDataGet200ResponseMessageController.
        :rtype: float
        """
        return self._over_discharges

    @over_discharges.setter
    def over_discharges(self, over_discharges: float):
        """Sets the over_discharges of this DynamicDataGet200ResponseMessageController.


        :param over_discharges: The over_discharges of this DynamicDataGet200ResponseMessageController.
        :type over_discharges: float
        """

        self._over_discharges = over_discharges
