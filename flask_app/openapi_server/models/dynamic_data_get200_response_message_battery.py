from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicDataGet200ResponseMessageBattery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volts=None, max_volts=None, min_volts=None, temperature=None, state_of_charge=None):  # noqa: E501
        """DynamicDataGet200ResponseMessageBattery - a model defined in OpenAPI

        :param volts: The volts of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :type volts: float
        :param max_volts: The max_volts of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :type max_volts: float
        :param min_volts: The min_volts of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :type min_volts: float
        :param temperature: The temperature of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :type temperature: float
        :param state_of_charge: The state_of_charge of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :type state_of_charge: float
        """
        self.openapi_types = {
            'volts': float,
            'max_volts': float,
            'min_volts': float,
            'temperature': float,
            'state_of_charge': float
        }

        self.attribute_map = {
            'volts': 'volts',
            'max_volts': 'maxVolts',
            'min_volts': 'minVolts',
            'temperature': 'temperature',
            'state_of_charge': 'stateOfCharge'
        }

        self._volts = volts
        self._max_volts = max_volts
        self._min_volts = min_volts
        self._temperature = temperature
        self._state_of_charge = state_of_charge

    @classmethod
    def from_dict(cls, dikt) -> 'DynamicDataGet200ResponseMessageBattery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _dynamic_data_get_200_response_message_battery of this DynamicDataGet200ResponseMessageBattery.  # noqa: E501
        :rtype: DynamicDataGet200ResponseMessageBattery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volts(self) -> float:
        """Gets the volts of this DynamicDataGet200ResponseMessageBattery.


        :return: The volts of this DynamicDataGet200ResponseMessageBattery.
        :rtype: float
        """
        return self._volts

    @volts.setter
    def volts(self, volts: float):
        """Sets the volts of this DynamicDataGet200ResponseMessageBattery.


        :param volts: The volts of this DynamicDataGet200ResponseMessageBattery.
        :type volts: float
        """

        self._volts = volts

    @property
    def max_volts(self) -> float:
        """Gets the max_volts of this DynamicDataGet200ResponseMessageBattery.


        :return: The max_volts of this DynamicDataGet200ResponseMessageBattery.
        :rtype: float
        """
        return self._max_volts

    @max_volts.setter
    def max_volts(self, max_volts: float):
        """Sets the max_volts of this DynamicDataGet200ResponseMessageBattery.


        :param max_volts: The max_volts of this DynamicDataGet200ResponseMessageBattery.
        :type max_volts: float
        """

        self._max_volts = max_volts

    @property
    def min_volts(self) -> float:
        """Gets the min_volts of this DynamicDataGet200ResponseMessageBattery.


        :return: The min_volts of this DynamicDataGet200ResponseMessageBattery.
        :rtype: float
        """
        return self._min_volts

    @min_volts.setter
    def min_volts(self, min_volts: float):
        """Sets the min_volts of this DynamicDataGet200ResponseMessageBattery.


        :param min_volts: The min_volts of this DynamicDataGet200ResponseMessageBattery.
        :type min_volts: float
        """

        self._min_volts = min_volts

    @property
    def temperature(self) -> float:
        """Gets the temperature of this DynamicDataGet200ResponseMessageBattery.


        :return: The temperature of this DynamicDataGet200ResponseMessageBattery.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this DynamicDataGet200ResponseMessageBattery.


        :param temperature: The temperature of this DynamicDataGet200ResponseMessageBattery.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def state_of_charge(self) -> float:
        """Gets the state_of_charge of this DynamicDataGet200ResponseMessageBattery.


        :return: The state_of_charge of this DynamicDataGet200ResponseMessageBattery.
        :rtype: float
        """
        return self._state_of_charge

    @state_of_charge.setter
    def state_of_charge(self, state_of_charge: float):
        """Sets the state_of_charge of this DynamicDataGet200ResponseMessageBattery.


        :param state_of_charge: The state_of_charge of this DynamicDataGet200ResponseMessageBattery.
        :type state_of_charge: float
        """

        self._state_of_charge = state_of_charge
