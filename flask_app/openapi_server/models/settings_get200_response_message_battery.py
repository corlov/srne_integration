from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SettingsGet200ResponseMessageBattery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery_type=None, recognized_voltage=None, boostcharging_voltage=None, charging_voltage_limit=None, over_voltage_threshold=None, system_voltage_setting=None, nominal_battery_capacity=None, floating_charging_voltage=None, equalizing_charging_voltage=None):  # noqa: E501
        """SettingsGet200ResponseMessageBattery - a model defined in OpenAPI

        :param battery_type: The battery_type of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type battery_type: str
        :param recognized_voltage: The recognized_voltage of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type recognized_voltage: int
        :param boostcharging_voltage: The boostcharging_voltage of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type boostcharging_voltage: int
        :param charging_voltage_limit: The charging_voltage_limit of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type charging_voltage_limit: int
        :param over_voltage_threshold: The over_voltage_threshold of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type over_voltage_threshold: int
        :param system_voltage_setting: The system_voltage_setting of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type system_voltage_setting: int
        :param nominal_battery_capacity: The nominal_battery_capacity of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type nominal_battery_capacity: int
        :param floating_charging_voltage: The floating_charging_voltage of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type floating_charging_voltage: int
        :param equalizing_charging_voltage: The equalizing_charging_voltage of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :type equalizing_charging_voltage: int
        """
        self.openapi_types = {
            'battery_type': str,
            'recognized_voltage': int,
            'boostcharging_voltage': int,
            'charging_voltage_limit': int,
            'over_voltage_threshold': int,
            'system_voltage_setting': int,
            'nominal_battery_capacity': int,
            'floating_charging_voltage': int,
            'equalizing_charging_voltage': int
        }

        self.attribute_map = {
            'battery_type': 'batteryType',
            'recognized_voltage': 'recognizedVoltage',
            'boostcharging_voltage': 'boostchargingVoltage',
            'charging_voltage_limit': 'chargingVoltageLimit',
            'over_voltage_threshold': 'overVoltageThreshold',
            'system_voltage_setting': 'systemVoltageSetting',
            'nominal_battery_capacity': 'nominalBatteryCapacity',
            'floating_charging_voltage': 'floatingChargingVoltage',
            'equalizing_charging_voltage': 'equalizingChargingVoltage'
        }

        self._battery_type = battery_type
        self._recognized_voltage = recognized_voltage
        self._boostcharging_voltage = boostcharging_voltage
        self._charging_voltage_limit = charging_voltage_limit
        self._over_voltage_threshold = over_voltage_threshold
        self._system_voltage_setting = system_voltage_setting
        self._nominal_battery_capacity = nominal_battery_capacity
        self._floating_charging_voltage = floating_charging_voltage
        self._equalizing_charging_voltage = equalizing_charging_voltage

    @classmethod
    def from_dict(cls, dikt) -> 'SettingsGet200ResponseMessageBattery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _settings_get_200_response_message_battery of this SettingsGet200ResponseMessageBattery.  # noqa: E501
        :rtype: SettingsGet200ResponseMessageBattery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery_type(self) -> str:
        """Gets the battery_type of this SettingsGet200ResponseMessageBattery.


        :return: The battery_type of this SettingsGet200ResponseMessageBattery.
        :rtype: str
        """
        return self._battery_type

    @battery_type.setter
    def battery_type(self, battery_type: str):
        """Sets the battery_type of this SettingsGet200ResponseMessageBattery.


        :param battery_type: The battery_type of this SettingsGet200ResponseMessageBattery.
        :type battery_type: str
        """

        self._battery_type = battery_type

    @property
    def recognized_voltage(self) -> int:
        """Gets the recognized_voltage of this SettingsGet200ResponseMessageBattery.


        :return: The recognized_voltage of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._recognized_voltage

    @recognized_voltage.setter
    def recognized_voltage(self, recognized_voltage: int):
        """Sets the recognized_voltage of this SettingsGet200ResponseMessageBattery.


        :param recognized_voltage: The recognized_voltage of this SettingsGet200ResponseMessageBattery.
        :type recognized_voltage: int
        """

        self._recognized_voltage = recognized_voltage

    @property
    def boostcharging_voltage(self) -> int:
        """Gets the boostcharging_voltage of this SettingsGet200ResponseMessageBattery.


        :return: The boostcharging_voltage of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._boostcharging_voltage

    @boostcharging_voltage.setter
    def boostcharging_voltage(self, boostcharging_voltage: int):
        """Sets the boostcharging_voltage of this SettingsGet200ResponseMessageBattery.


        :param boostcharging_voltage: The boostcharging_voltage of this SettingsGet200ResponseMessageBattery.
        :type boostcharging_voltage: int
        """

        self._boostcharging_voltage = boostcharging_voltage

    @property
    def charging_voltage_limit(self) -> int:
        """Gets the charging_voltage_limit of this SettingsGet200ResponseMessageBattery.


        :return: The charging_voltage_limit of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._charging_voltage_limit

    @charging_voltage_limit.setter
    def charging_voltage_limit(self, charging_voltage_limit: int):
        """Sets the charging_voltage_limit of this SettingsGet200ResponseMessageBattery.


        :param charging_voltage_limit: The charging_voltage_limit of this SettingsGet200ResponseMessageBattery.
        :type charging_voltage_limit: int
        """

        self._charging_voltage_limit = charging_voltage_limit

    @property
    def over_voltage_threshold(self) -> int:
        """Gets the over_voltage_threshold of this SettingsGet200ResponseMessageBattery.


        :return: The over_voltage_threshold of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._over_voltage_threshold

    @over_voltage_threshold.setter
    def over_voltage_threshold(self, over_voltage_threshold: int):
        """Sets the over_voltage_threshold of this SettingsGet200ResponseMessageBattery.


        :param over_voltage_threshold: The over_voltage_threshold of this SettingsGet200ResponseMessageBattery.
        :type over_voltage_threshold: int
        """

        self._over_voltage_threshold = over_voltage_threshold

    @property
    def system_voltage_setting(self) -> int:
        """Gets the system_voltage_setting of this SettingsGet200ResponseMessageBattery.


        :return: The system_voltage_setting of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._system_voltage_setting

    @system_voltage_setting.setter
    def system_voltage_setting(self, system_voltage_setting: int):
        """Sets the system_voltage_setting of this SettingsGet200ResponseMessageBattery.


        :param system_voltage_setting: The system_voltage_setting of this SettingsGet200ResponseMessageBattery.
        :type system_voltage_setting: int
        """

        self._system_voltage_setting = system_voltage_setting

    @property
    def nominal_battery_capacity(self) -> int:
        """Gets the nominal_battery_capacity of this SettingsGet200ResponseMessageBattery.


        :return: The nominal_battery_capacity of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._nominal_battery_capacity

    @nominal_battery_capacity.setter
    def nominal_battery_capacity(self, nominal_battery_capacity: int):
        """Sets the nominal_battery_capacity of this SettingsGet200ResponseMessageBattery.


        :param nominal_battery_capacity: The nominal_battery_capacity of this SettingsGet200ResponseMessageBattery.
        :type nominal_battery_capacity: int
        """

        self._nominal_battery_capacity = nominal_battery_capacity

    @property
    def floating_charging_voltage(self) -> int:
        """Gets the floating_charging_voltage of this SettingsGet200ResponseMessageBattery.


        :return: The floating_charging_voltage of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._floating_charging_voltage

    @floating_charging_voltage.setter
    def floating_charging_voltage(self, floating_charging_voltage: int):
        """Sets the floating_charging_voltage of this SettingsGet200ResponseMessageBattery.


        :param floating_charging_voltage: The floating_charging_voltage of this SettingsGet200ResponseMessageBattery.
        :type floating_charging_voltage: int
        """

        self._floating_charging_voltage = floating_charging_voltage

    @property
    def equalizing_charging_voltage(self) -> int:
        """Gets the equalizing_charging_voltage of this SettingsGet200ResponseMessageBattery.


        :return: The equalizing_charging_voltage of this SettingsGet200ResponseMessageBattery.
        :rtype: int
        """
        return self._equalizing_charging_voltage

    @equalizing_charging_voltage.setter
    def equalizing_charging_voltage(self, equalizing_charging_voltage: int):
        """Sets the equalizing_charging_voltage of this SettingsGet200ResponseMessageBattery.


        :param equalizing_charging_voltage: The equalizing_charging_voltage of this SettingsGet200ResponseMessageBattery.
        :type equalizing_charging_voltage: int
        """

        self._equalizing_charging_voltage = equalizing_charging_voltage
