from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.settings_get200_response_message_light_control_special_power_control import SettingsGet200ResponseMessageLightControlSpecialPowerControl
from openapi_server import util

from openapi_server.models.settings_get200_response_message_light_control_special_power_control import SettingsGet200ResponseMessageLightControlSpecialPowerControl  # noqa: E501

class SettingsGet200ResponseMessageLightControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, light_control_delay=None, light_control_voltage=None, special_power_control=None):  # noqa: E501
        """SettingsGet200ResponseMessageLightControl - a model defined in OpenAPI

        :param light_control_delay: The light_control_delay of this SettingsGet200ResponseMessageLightControl.  # noqa: E501
        :type light_control_delay: int
        :param light_control_voltage: The light_control_voltage of this SettingsGet200ResponseMessageLightControl.  # noqa: E501
        :type light_control_voltage: int
        :param special_power_control: The special_power_control of this SettingsGet200ResponseMessageLightControl.  # noqa: E501
        :type special_power_control: SettingsGet200ResponseMessageLightControlSpecialPowerControl
        """
        self.openapi_types = {
            'light_control_delay': int,
            'light_control_voltage': int,
            'special_power_control': SettingsGet200ResponseMessageLightControlSpecialPowerControl
        }

        self.attribute_map = {
            'light_control_delay': 'lightControlDelay',
            'light_control_voltage': 'lightControlVoltage',
            'special_power_control': 'specialPowerControl'
        }

        self._light_control_delay = light_control_delay
        self._light_control_voltage = light_control_voltage
        self._special_power_control = special_power_control

    @classmethod
    def from_dict(cls, dikt) -> 'SettingsGet200ResponseMessageLightControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _settings_get_200_response_message_lightControl of this SettingsGet200ResponseMessageLightControl.  # noqa: E501
        :rtype: SettingsGet200ResponseMessageLightControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def light_control_delay(self) -> int:
        """Gets the light_control_delay of this SettingsGet200ResponseMessageLightControl.


        :return: The light_control_delay of this SettingsGet200ResponseMessageLightControl.
        :rtype: int
        """
        return self._light_control_delay

    @light_control_delay.setter
    def light_control_delay(self, light_control_delay: int):
        """Sets the light_control_delay of this SettingsGet200ResponseMessageLightControl.


        :param light_control_delay: The light_control_delay of this SettingsGet200ResponseMessageLightControl.
        :type light_control_delay: int
        """

        self._light_control_delay = light_control_delay

    @property
    def light_control_voltage(self) -> int:
        """Gets the light_control_voltage of this SettingsGet200ResponseMessageLightControl.


        :return: The light_control_voltage of this SettingsGet200ResponseMessageLightControl.
        :rtype: int
        """
        return self._light_control_voltage

    @light_control_voltage.setter
    def light_control_voltage(self, light_control_voltage: int):
        """Sets the light_control_voltage of this SettingsGet200ResponseMessageLightControl.


        :param light_control_voltage: The light_control_voltage of this SettingsGet200ResponseMessageLightControl.
        :type light_control_voltage: int
        """

        self._light_control_voltage = light_control_voltage

    @property
    def special_power_control(self) -> SettingsGet200ResponseMessageLightControlSpecialPowerControl:
        """Gets the special_power_control of this SettingsGet200ResponseMessageLightControl.


        :return: The special_power_control of this SettingsGet200ResponseMessageLightControl.
        :rtype: SettingsGet200ResponseMessageLightControlSpecialPowerControl
        """
        return self._special_power_control

    @special_power_control.setter
    def special_power_control(self, special_power_control: SettingsGet200ResponseMessageLightControlSpecialPowerControl):
        """Sets the special_power_control of this SettingsGet200ResponseMessageLightControl.


        :param special_power_control: The special_power_control of this SettingsGet200ResponseMessageLightControl.
        :type special_power_control: SettingsGet200ResponseMessageLightControlSpecialPowerControl
        """

        self._special_power_control = special_power_control
